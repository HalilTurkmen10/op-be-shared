// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package error

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ErorrSvcClient is the client API for ErorrSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErorrSvcClient interface {
	GetErrors(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*Errors, error)
}

type erorrSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewErorrSvcClient(cc grpc.ClientConnInterface) ErorrSvcClient {
	return &erorrSvcClient{cc}
}

func (c *erorrSvcClient) GetErrors(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*Errors, error) {
	out := new(Errors)
	err := c.cc.Invoke(ctx, "/ErorrSvc/GetErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErorrSvcServer is the server API for ErorrSvc service.
// All implementations must embed UnimplementedErorrSvcServer
// for forward compatibility
type ErorrSvcServer interface {
	GetErrors(context.Context, *ErrorRequest) (*Errors, error)
	mustEmbedUnimplementedErorrSvcServer()
}

// UnimplementedErorrSvcServer must be embedded to have forward compatible implementations.
type UnimplementedErorrSvcServer struct {
}

func (UnimplementedErorrSvcServer) GetErrors(context.Context, *ErrorRequest) (*Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrors not implemented")
}
func (UnimplementedErorrSvcServer) mustEmbedUnimplementedErorrSvcServer() {}

// UnsafeErorrSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErorrSvcServer will
// result in compilation errors.
type UnsafeErorrSvcServer interface {
	mustEmbedUnimplementedErorrSvcServer()
}

func RegisterErorrSvcServer(s grpc.ServiceRegistrar, srv ErorrSvcServer) {
	s.RegisterService(&ErorrSvc_ServiceDesc, srv)
}

func _ErorrSvc_GetErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErorrSvcServer).GetErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ErorrSvc/GetErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErorrSvcServer).GetErrors(ctx, req.(*ErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ErorrSvc_ServiceDesc is the grpc.ServiceDesc for ErorrSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErorrSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ErorrSvc",
	HandlerType: (*ErorrSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetErrors",
			Handler:    _ErorrSvc_GetErrors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "error.proto",
}
