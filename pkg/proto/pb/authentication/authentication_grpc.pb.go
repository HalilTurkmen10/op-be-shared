// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package authentication

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationSvcClient is the client API for AuthenticationSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationSvcClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Token, error)
	Refresh(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
	Logout(ctx context.Context, in *Token, opts ...grpc.CallOption) (*LogoutResponse, error)
}

type authenticationSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationSvcClient(cc grpc.ClientConnInterface) AuthenticationSvcClient {
	return &authenticationSvcClient{cc}
}

func (c *authenticationSvcClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/AuthenticationSvc/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationSvcClient) Refresh(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/AuthenticationSvc/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationSvcClient) Logout(ctx context.Context, in *Token, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/AuthenticationSvc/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationSvcServer is the server API for AuthenticationSvc service.
// All implementations must embed UnimplementedAuthenticationSvcServer
// for forward compatibility
type AuthenticationSvcServer interface {
	Login(context.Context, *LoginRequest) (*Token, error)
	Refresh(context.Context, *Token) (*Token, error)
	Logout(context.Context, *Token) (*LogoutResponse, error)
	mustEmbedUnimplementedAuthenticationSvcServer()
}

// UnimplementedAuthenticationSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationSvcServer struct {
}

func (UnimplementedAuthenticationSvcServer) Login(context.Context, *LoginRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthenticationSvcServer) Refresh(context.Context, *Token) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAuthenticationSvcServer) Logout(context.Context, *Token) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthenticationSvcServer) mustEmbedUnimplementedAuthenticationSvcServer() {}

// UnsafeAuthenticationSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationSvcServer will
// result in compilation errors.
type UnsafeAuthenticationSvcServer interface {
	mustEmbedUnimplementedAuthenticationSvcServer()
}

func RegisterAuthenticationSvcServer(s grpc.ServiceRegistrar, srv AuthenticationSvcServer) {
	s.RegisterService(&AuthenticationSvc_ServiceDesc, srv)
}

func _AuthenticationSvc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationSvcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationSvc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationSvcServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationSvc_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationSvcServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationSvc/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationSvcServer).Refresh(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationSvc_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationSvcServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationSvc/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationSvcServer).Logout(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationSvc_ServiceDesc is the grpc.ServiceDesc for AuthenticationSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthenticationSvc",
	HandlerType: (*AuthenticationSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthenticationSvc_Login_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _AuthenticationSvc_Refresh_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthenticationSvc_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication.proto",
}
