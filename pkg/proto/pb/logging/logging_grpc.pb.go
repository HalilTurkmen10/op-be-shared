// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logging

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoggingSvcClient is the client API for LoggingSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggingSvcClient interface {
	GetLogsByFilter(ctx context.Context, in *LogDataFilter, opts ...grpc.CallOption) (*LogDatas, error)
	Log(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*LoggingResult, error)
}

type loggingSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggingSvcClient(cc grpc.ClientConnInterface) LoggingSvcClient {
	return &loggingSvcClient{cc}
}

func (c *loggingSvcClient) GetLogsByFilter(ctx context.Context, in *LogDataFilter, opts ...grpc.CallOption) (*LogDatas, error) {
	out := new(LogDatas)
	err := c.cc.Invoke(ctx, "/LoggingSvc/GetLogsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggingSvcClient) Log(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*LoggingResult, error) {
	out := new(LoggingResult)
	err := c.cc.Invoke(ctx, "/LoggingSvc/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggingSvcServer is the server API for LoggingSvc service.
// All implementations must embed UnimplementedLoggingSvcServer
// for forward compatibility
type LoggingSvcServer interface {
	GetLogsByFilter(context.Context, *LogDataFilter) (*LogDatas, error)
	Log(context.Context, *LogData) (*LoggingResult, error)
	mustEmbedUnimplementedLoggingSvcServer()
}

// UnimplementedLoggingSvcServer must be embedded to have forward compatible implementations.
type UnimplementedLoggingSvcServer struct {
}

func (UnimplementedLoggingSvcServer) GetLogsByFilter(context.Context, *LogDataFilter) (*LogDatas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogsByFilter not implemented")
}
func (UnimplementedLoggingSvcServer) Log(context.Context, *LogData) (*LoggingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedLoggingSvcServer) mustEmbedUnimplementedLoggingSvcServer() {}

// UnsafeLoggingSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggingSvcServer will
// result in compilation errors.
type UnsafeLoggingSvcServer interface {
	mustEmbedUnimplementedLoggingSvcServer()
}

func RegisterLoggingSvcServer(s grpc.ServiceRegistrar, srv LoggingSvcServer) {
	s.RegisterService(&LoggingSvc_ServiceDesc, srv)
}

func _LoggingSvc_GetLogsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogDataFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingSvcServer).GetLogsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LoggingSvc/GetLogsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingSvcServer).GetLogsByFilter(ctx, req.(*LogDataFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggingSvc_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingSvcServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LoggingSvc/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingSvcServer).Log(ctx, req.(*LogData))
	}
	return interceptor(ctx, in, info, handler)
}

// LoggingSvc_ServiceDesc is the grpc.ServiceDesc for LoggingSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoggingSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LoggingSvc",
	HandlerType: (*LoggingSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogsByFilter",
			Handler:    _LoggingSvc_GetLogsByFilter_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _LoggingSvc_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logging.proto",
}
