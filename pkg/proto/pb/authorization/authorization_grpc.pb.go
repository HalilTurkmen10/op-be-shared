// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package authorization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationSvcClient is the client API for AuthorizationSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationSvcClient interface {
	GetRoles(ctx context.Context, in *RoleFilter, opts ...grpc.CallOption) (*Roles, error)
}

type authorizationSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationSvcClient(cc grpc.ClientConnInterface) AuthorizationSvcClient {
	return &authorizationSvcClient{cc}
}

func (c *authorizationSvcClient) GetRoles(ctx context.Context, in *RoleFilter, opts ...grpc.CallOption) (*Roles, error) {
	out := new(Roles)
	err := c.cc.Invoke(ctx, "/AuthorizationSvc/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationSvcServer is the server API for AuthorizationSvc service.
// All implementations must embed UnimplementedAuthorizationSvcServer
// for forward compatibility
type AuthorizationSvcServer interface {
	GetRoles(context.Context, *RoleFilter) (*Roles, error)
	mustEmbedUnimplementedAuthorizationSvcServer()
}

// UnimplementedAuthorizationSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationSvcServer struct {
}

func (UnimplementedAuthorizationSvcServer) GetRoles(context.Context, *RoleFilter) (*Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedAuthorizationSvcServer) mustEmbedUnimplementedAuthorizationSvcServer() {}

// UnsafeAuthorizationSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationSvcServer will
// result in compilation errors.
type UnsafeAuthorizationSvcServer interface {
	mustEmbedUnimplementedAuthorizationSvcServer()
}

func RegisterAuthorizationSvcServer(s grpc.ServiceRegistrar, srv AuthorizationSvcServer) {
	s.RegisterService(&AuthorizationSvc_ServiceDesc, srv)
}

func _AuthorizationSvc_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationSvcServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorizationSvc/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationSvcServer).GetRoles(ctx, req.(*RoleFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationSvc_ServiceDesc is the grpc.ServiceDesc for AuthorizationSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthorizationSvc",
	HandlerType: (*AuthorizationSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoles",
			Handler:    _AuthorizationSvc_GetRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorization.proto",
}
